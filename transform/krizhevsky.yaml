# author: Pierre-Luc Carrier

!obj:pylearn2.train.Train {

    dataset: &train !obj:contestTransformerDataset.TransformerDataset {
        raw : !obj:contest_dataset.ContestDataset {
            which_set: 'train',
#            base_path: '/home/xavier/data/ContestDataset',
            start: 0,
            stop: 3500,
            preprocessor : !obj:pylearn2.datasets.preprocessing.Standardize {},
            fit_preprocessor: True,
            fit_test_preprocessor: True,
            axes: ['c', 0, 1, 'b']
        },
        transformer : !obj:transformer.TransformationPipeline { 
            input_space: !obj:pylearn2.space.Conv2DSpace {
                shape: [48, 48],
                num_channels: 1,
                axes: ['c', 0, 1, 'b'],
            },
            transformations: [
                !obj:transformer.TransformationPool {
                    p_distribution: [0.4, 0.3, 0.3],
                    transformations: [
                        !obj:transformer.GaussianNoise { p: 0.5 },
                        !obj:transformer.Sharpening { p: 0.5 },
                        !obj:transformer.Denoising { p: 0.5 }
                    ],
                },
                !obj:transformer.Occlusion {},
                !obj:transformer.HalfFace {},
                !obj:transformer.Translation {},
                !obj:transformer.Scaling {},
                !obj:transformer.Rotation {},
                !obj:transformer.Flipping {}
        ] },
        space_preserving : True,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [ !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h0',
                     pad: 4,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 48,
                     num_pieces: 2,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: .9,
                 }, !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: 7,
                     irange: 0.
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [48, 48],
            num_channels: 1,
            axes: ['c', 0, 1, 'b'],
        },
        dropout_include_probs: [ .5, 1 ],
        dropout_input_include_prob: .8,
        dropout_input_scale: 1.,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 128,
        learning_rate: .1,
        monitoring_dataset:
            {
                'train' : *train,
                'test'  : !obj:contest_dataset.ContestDataset {
                    which_set: 'train',
#                    base_path: '/home/xavier/data/ContestDataset',
                    start: 3500,
                    stop: 4100,
                    preprocessor : !obj:pylearn2.datasets.preprocessing.Standardize {},
                    fit_preprocessor: True,
                    fit_test_preprocessor: True,
                    axes: ['c', 0, 1, 'b'],
                }
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
                supervised: 1
            }, !obj:pylearn2.models.mlp.WeightDecay {
                coeffs: [ .00000, .00110 ]
            }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "test_y_misclass",
            prop_decrease: 0.,
            N: 50
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'test_y_misclass',
             save_path: "mlp_best.pkl"
        }
    ],
}
