!obj:pylearn2.train.Train {
    dataset: !obj:contest_dataset.ContestDataset {
        which_set: 'train',
        start: 0,
        stop: 3400,
        preprocessor : !obj:pylearn2.datasets.preprocessing.Standardize {},
        fit_preprocessor: True,
        fit_test_preprocessor: True
        },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [!obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h0',
                     dim: 500,
                     sparse_init: 15,
                 }, !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: 7,
                     irange: 0.
                 }
                ],
        nvis: 2304,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 64,
        learning_rate: 0.030000,
        init_momentum: 0.100000,
        monitoring_dataset:
            {
                'train' : !obj:contest_dataset.ContestDataset {
                              which_set: 'train',
                              start: 0,
                              stop: 3400,
                              preprocessor : !obj:pylearn2.datasets.preprocessing.Standardize {},
                              fit_preprocessor: True,
                              fit_test_preprocessor: True
                              },
                'valid' : !obj:contest_dataset.ContestDataset {
                              which_set: 'train',
                              start: 3400,
                              stop:  4150,
                              preprocessor : !obj:pylearn2.datasets.preprocessing.Standardize {},
                              fit_preprocessor: True,
                              fit_test_preprocessor: True
                          }
            },
        cost: !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
                supervised: 1
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass"
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "2MLPSoftmax_LR0.03Momentum0.1_best.pkl"
        }, !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .99
        }
    ],
    save_path: "2MLPSoftmax_LR0.03Momentum0.1.pkl",
    save_freq: 1
    }