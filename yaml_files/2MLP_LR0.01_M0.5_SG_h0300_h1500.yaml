!obj:pylearn2.train.Train {
    dataset: &train !obj:contestTransformerDataset.TransformerDataset {
        raw : !obj:contest_dataset.ContestDataset {
            which_set: 'train',
            start: 0,
            stop: 3400,
            preprocessor : !obj:pylearn2.datasets.preprocessing.Standardize {},
            fit_preprocessor: True,
            fit_test_preprocessor: True,
},
        transformer : !obj:transformer.TransformationPipeline {
            input_space: !obj:pylearn2.space.Conv2DSpace {
                shape: [48, 48],
                num_channels: 1,
         },
            transformations: [
                !obj:transformer.TransformationPool {
                    p_distribution: [0.4, 0.3, 0.3],
                    transformations: [
                        !obj:transformer.GaussianNoise { p: 0.5 },
                        !obj:transformer.Sharpening { p: 0.5 },
                        !obj:transformer.Denoising { p: 0.5 }
                    ],
                },
                !obj:transformer.Occlusion {},
                !obj:transformer.HalfFace {},
                !obj:transformer.Translation {},
                !obj:transformer.Scaling {},
                !obj:transformer.Rotation {},
                !obj:transformer.Flipping {}
        ] },
        space_preserving : True,
},
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [ !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h0',
                     dim: 300,
                     sparse_init: 15,
                 }, !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h1',
                     dim: 500,
                     sparse_init: 15,
                 }, !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: 7,
                     irange: 0.
                 }
                ],
       nvis: 2304,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: 0.01,
        init_momentum: 0.5,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:contest_dataset.ContestDataset {
                              which_set: 'train',
                              start: 3400,
                              stop: 4100,
                              preprocessor : !obj:pylearn2.datasets.preprocessing.Standardize {},
                              fit_preprocessor: True,
                          }
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
                supervised: 1
            }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 15
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "2MLP_LR0.01_M0.5_SG_h0300_h1500_best.pkl"
        }, !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .99
        }
    ],
    save_path: "2MLP_LR0.01_M0.5_SG_h0300_h1500.pkl",
    save_freq: 1
}
