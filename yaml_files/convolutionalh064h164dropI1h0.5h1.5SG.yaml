!obj:pylearn2.train.Train {
    dataset: &train !obj:contestTransformerDataset.TransformerDataset {
        raw : !obj:contest_dataset.ContestDataset {
            which_set: 'train',
            start: 0,
            stop: 3400,
            preprocessor : !obj:pylearn2.datasets.preprocessing.Standardize {},
            fit_preprocessor: True,
            fit_test_preprocessor: True,
},
        transformer : !obj:transformer.TransformationPipeline {
            input_space: !obj:pylearn2.space.Conv2DSpace {
                shape: [48, 48],
                num_channels: 1,
         },
            transformations: [
                !obj:transformer.TransformationPool {
                    p_distribution: [0.4, 0.3, 0.3],
                    transformations: [
                        !obj:transformer.GaussianNoise { p: 0.5 },
                        !obj:transformer.Sharpening { p: 0.5 },
                        !obj:transformer.Denoising { p: 0.5 }
                    ],
                },
                !obj:transformer.Occlusion {},
                !obj:transformer.HalfFace {},
                !obj:transformer.Translation {},
                !obj:transformer.Scaling {},
                !obj:transformer.Rotation {},
                !obj:transformer.Flipping {}
        ] },
        space_preserving : True,
},
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 100,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [48, 48],
            num_channels: 1
        },
        layers: [ !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h0',
                     output_channels: 64,
                     irange: .05,
                     kernel_shape: [5, 5],
                     pool_shape: [4, 4],
                     pool_stride: [3, 3],
                     max_kernel_norm: 1.9365,
                 }, !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h1',
                     output_channels: 64,
                     irange: .05,
                     kernel_shape: [5, 5],
                     pool_shape: [4, 4],
                     pool_stride: [3, 3],
                     max_kernel_norm: 1.9365,
                 }, !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 7,
                     istdev: .05
                 }
                ],
        dropout_include_probs: [ .5, .5, 1 ],
        dropout_input_include_prob: 1,
        dropout_input_scale: 1.,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: .01,
        init_momentum: .5,
        monitoring_dataset:
            {
                'train' : !obj:contest_dataset.ContestDataset {
                              which_set: 'train',
                              start: 0,
                              stop: 3400,
                              preprocessor : !obj:pylearn2.datasets.preprocessing.Standardize {},
                              fit_preprocessor: True
                          },
                'valid' : !obj:contest_dataset.ContestDataset {
                              which_set: 'train',
                              start: 3400,
                              stop: 4100,
                              preprocessor: !obj:pylearn2.datasets.preprocessing.Standardize {},
                              fit_preprocessor: True
                          }
            },
        cost: !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
                supervised: 1
         },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 10
        }
    },
    extensions:
        [ !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "convolutionalh064h164dropI1h0.5h1.5SG_best.pkl"
        }, !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .99
        }
    ],
    save_path: "convolutionalh064h164dropI1h0.5h1.5SG.pkl",
    save_freq: 1
}
